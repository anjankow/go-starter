// Code generated by MockGen. DO NOT EDIT.
// Source: allaboutapps.dev/aw/go-starter/internal/mailer/transport (interfaces: MailTransporter)

// Package transport is a generated GoMock package.
package transport

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	email "github.com/jordan-wright/email"
)

// GomockMailTransport is a mock of MailTransporter interface.
type GomockMailTransport struct {
	ctrl     *gomock.Controller
	recorder *GomockMailTransportMockRecorder
}

// GomockMailTransportMockRecorder is the mock recorder for GomockMailTransport.
type GomockMailTransportMockRecorder struct {
	mock *GomockMailTransport
}

// NewGomockMailTransport creates a new mock instance.
func NewGomockMailTransport(ctrl *gomock.Controller) *GomockMailTransport {
	mock := &GomockMailTransport{ctrl: ctrl}
	mock.recorder = &GomockMailTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GomockMailTransport) EXPECT() *GomockMailTransportMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *GomockMailTransport) Send(arg0 *email.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *GomockMailTransportMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*GomockMailTransport)(nil).Send), arg0)
}
