// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"allaboutapps.dev/aw/go-starter/internal/config"
	"allaboutapps.dev/aw/go-starter/internal/i18n"
	"allaboutapps.dev/aw/go-starter/internal/mailer"
	"allaboutapps.dev/aw/go-starter/internal/push"
	"database/sql"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitNewServer(cfg config.Server) (*Server, error) {
	db, err := InitDB(cfg)
	if err != nil {
		return nil, err
	}
	service, err := InitI18n(cfg)
	if err != nil {
		return nil, err
	}
	mailer, err := InitMailer(cfg, service)
	if err != nil {
		return nil, err
	}
	pushService, err := InitPush(cfg, db)
	if err != nil {
		return nil, err
	}
	server := NewServer(cfg, db, mailer, pushService, service)
	return server, nil
}

func InitNewServerWithDB(cfg config.Server, db *sql.DB) (*Server, error) {
	service, err := InitI18n(cfg)
	if err != nil {
		return nil, err
	}
	mailer, err := InitMailer(cfg, service)
	if err != nil {
		return nil, err
	}
	pushService, err := InitPush(cfg, db)
	if err != nil {
		return nil, err
	}
	server := NewServer(cfg, db, mailer, pushService, service)
	return server, nil
}

// wire.go:

// NewServer returns NewServer instance with all the components initialized.
// Exceptions are Echo and Router, which are not initialized.
// After this call make sure that router.Init(s) is invoked.
func NewServer(
	cfg config.Server,
	db *sql.DB, mailer2 *mailer.Mailer, push2 *push.Service, i18n2 *i18n.Service,
) *Server {
	return &Server{
		Config: cfg,
		DB:     db,
		Mailer: mailer2,
		Push:   push2,
		I18n:   i18n2,
	}
}
